Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-12-11T08:25:30+08:00

====== JAVA反射 ======
创建日期 Saturday 11 December 2021

{{./pasted_image.png}}

{{./pasted_image001.png}}


{{./pasted_image003.png}}


{{./pasted_image004.png}}


{{./pasted_image005.png}}
运行结果如下
{{./pasted_image006.png}}

反射优点和缺点
{{./pasted_image007.png}}

{{./pasted_image008.png}}

{{./pasted_image009.png}}

{{./pasted_image010.png}}
{{./pasted_image011.png}}

下图中a和b都是int[]类型，所有只会在内存中创建一个模板类，注意，它们的hashcode是一样的
只要元素类型和维度是一样的，就是同一个class
{{./pasted_image012.png}}


{{./pasted_image013.png}}



类加载的过程
{{./pasted_image018.png}}
{{./pasted_image020.png}}

实例
{{./pasted_image014.png}}
这里会合并静态变量，所以只会显示100
{{./pasted_image016.png}}
{{./pasted_image017.png}}


{{./pasted_image021.png}}

{{./pasted_image023.png}}


类加载器的作用
{{./pasted_image024.png}}


{{./pasted_image025.png}}

获取类运行时的结构
{{./pasted_image026.png}}
{{./pasted_image027.png}}


{{./pasted_image013001.png}}

{{./pasted_image029.png}}

{{./pasted_image028.png}}

如下图，如果没有参数，那么就指定parameterTypes为null
{{./pasted_image031.png}}


获取指定的方法和构造器
{{./pasted_image032.png}}
{{./pasted_image033.png}}


here means that parameterTypes are Class Type!
{{./pasted_image036.png}}


通过反射构造对象，调用方法，操作属性
{{./pasted_image038.png}}


{{./pasted_image039.png}}

反射会降低效率,当关闭检测开关时也会提升一点效率
{{./pasted_image041.png}}







