Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-01-01T19:41:20+08:00

====== CallGraph ======
创建日期 Saturday 01 January 2022

forName方法
{{./pasted_image.png}}

{{./pasted_image005.png}}
{{./pasted_image003.png}}
{{./pasted_image006.png}}
{{./pasted_image004.png}}

Class c1= Class.forName("com.lee.reflection.User1"). 下图反应的是c1所指向的heapValue，而这个heapValue是新生成的
{{./pasted_image002.png}}
图一

由下面的结果可以知道，对于ReifiedClass（？type， ？classHeap），这里的type既可能是ClassHeap_InstanceType(?classHeap, ?type)中的type提供的
也可能是!TypeHasHeap(?type)中的type提供的（它们本身没有meta object,是人为创造的）
{{./pasted_image007.png}}
如果调用比如 Class c1 = User1.class，那么肯定是有这个meta-object的，因为在编译阶段如果不存在User1这个类，这里就会报错
{{./pasted_image009.png}}
下图是没有meta-object的，人为的去创造一个
{{./pasted_image008.png}}
cat mainAnalysis.ReifiedClass.csv |grep -i 'Refl' 的部分结果如下，框1中应该对应的是有meta-object的，框2中的应该对应的没有meta-object的
{{./pasted_image010.png}}


这里由SpecialMissingNewInstanceValue产生的VarPointsTo的关系有什么作用？图二中的VarPointsTo是为了产生一个默认的值，占位符,图一中产生的是真实Class Object
{{./pasted_image017.png}}
{{./pasted_image012.png}}
图二

{{./pasted_image013.png}}


{{./pasted_image014.png}}


{{./pasted_image015.png}}


{{./pasted_image016.png}}

当调用下述指令时，即使aliasing中没有反射，它也会生成相应的ReifiedMethod(所以并不是只有反射的时候才有)
{{./pasted_image021.png}}
{{./pasted_image019.png}}

关于Aliasing1中的var的shimple表示
{{./pasted_image023.png}}
s1#_41 (s1)
idMethod#_44(第44行的idMethod)
clazz#_46  (clazz)
methods#_47 (methods[])
method#_49(第49行的method)
idMethod_$$A_1#_51(第51行的idMethod)
idMethod_$$A_2#_49 = Phi(idMethod#_44 #2, idMethod_$$A_1#_51 #4) (56行的idMethod)
i#5#_56 (o)
method#6#_57（s2）
{{./pasted_image024.png}}

{{./pasted_image025.png}}

{{./pasted_image026.png}}

{{./pasted_image027.png}}

{{./pasted_image028.png}}

{{./pasted_image029.png}}




